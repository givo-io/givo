package main

import (
	"context"
	"fmt"
	"log"
	"math/big"
	"os"
	"time"

	"github.com/ethereum/go-ethereum/crypto"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"

	logger "github.com/sarathsp06/gologger"

	"github.com/ethereum/go-ethereum/ethclient"
)

func main() {
	logger.InitLogger("INF", ".", "_", true)
	logger.SetLogWriter(os.Stdout)
	url := "https://rinkeby.infura.io/v3/16ca166c25fd48e88746d37f39d03972"
	url = "wss://rinkeby.infura.io/ws"
	url = "http://127.0.0.1:7545"

	conn, err := ethclient.Dial(url)
	if err != nil {
		log.Fatalf("Something went wrong dealing with error err: %v", err)
	}

	// ks := keystore.NewKeyStore(
	// 	"/tmp/eth/sarath",
	// 	keystore.LightScryptN,
	// 	keystore.LightScryptP)
	// account, err := ks.NewAccount("thisissparta")
	// x, _ := os.Open(account.URL.Path)
	keyString := "536d2fffff9af2dcb66e75782ccf75450246703130b8ab775f1f5893a6cef26a"
	keyString = "d3193a12ca4dd3854639cf0524ac4a06083f703e63c5d55f6c20624a27bb29aa"
	keyString = "536d2fffff9af2dcb66e75782ccf75450246703130b8ab775f1f5893a6cef26a"
	key, err := crypto.HexToECDSA(keyString)
	if err != nil {
		log.Fatalf("Something went wrong dealing with error err: %v", err)
	}

	tc := bind.NewKeyedTransactor(key)
	addr, _, givo, err := DeployGivo(tc, conn)
	if err != nil {
		log.Fatalf("Something went wrong deploying mortal with error err: %v", err)
	}

	session := GivoSession{
		Contract:     givo,
		TransactOpts: *tc,
		CallOpts:     bind.CallOpts{Context: context.Background()},
	}

	fmt.Println("givo: ", addr)
	for {
		<-time.After(time.Second * 2)
		_, err := session.CreateOffer("thenga", "image_string", "detail_string")
		fmt.Println(err)
		fmt.Println(session.Offers(big.NewInt(0), big.NewInt(0)))
	}
	// _, _, greeter, err := DeployGreeter(tc, conn, byte32(" this is sparta "))
	// if err != nil {
	// 	log.Fatalf("Something went wrong deploying greeter  err: %v", err)
	// }
	// fmt.Println(greeter)
	// go func(greeter *Greeter) {
	// 	for {
	// 		<-time.After(time.Second * 3)
	// 		tx, err := greeter.Greet(tc)
	// 		if err != nil {
	// 			log.Println("error greeting", err)
	// 			continue
	// 		}
	// 		fmt.Println("[", tx.Data(), "]")
	// 	}
	// }(greeter)

	// sink := make(chan *GreeterNewGreeting, 10)
	// go func() {
	// 	for message := range sink {
	// 		log.Println(string(message.Greeting[:]))
	// 	}
	// }()
	// greeter.WatchNewGreeting(&bind.WatchOpts{}, sink)
	// fmt.Println("Watching")
	// select {}
}

func byte32(x string) [32]byte {
	result := [32]byte{}
	copy(result[:], []byte(x))
	fmt.Println(result)
	return result
}
